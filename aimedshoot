using UnityEngine;
using System.Collections;

public class aimedshoot : MonoBehaviour {

	GameObject player;

	float ospeed=9;
	public float yspeed=0,wspeed =0;
	public bool up = true;
	public bool clockwise = true;
	public int distraction=0;
	float SignedAngleBetween(Vector3 a, Vector3 b, Vector3 n){
		// angle in [0,180]
		float angle = Vector3.Angle(a,b);
		float sign = Mathf.Sign(Vector3.Dot(n,Vector3.Cross(a,b)));
		
		// angle in [-179,180]
		float signed_angle = angle * sign;
		
		// angle in [0,360] (not used but included here for completeness)
		//float angle360 =  (signed_angle + 180) % 360;
		
		return signed_angle;
	}
	// Use this for initialization
	void Start () {




		player = GameObject.FindGameObjectWithTag("Player");
		StartCoroutine(pausestart(3));
		StartCoroutine(halt());
	}

	IEnumerator halt()
	{

		yield return new WaitForSeconds(10.0f);
		GameObject.Destroy(gameObject);
	}


	IEnumerator pausestart(int s)
	{
		int i=0;
		if(i<s)
		{
		{while(i<s)
		{
				i++;
				yield return new WaitForSeconds(1.0f);

		}
				headingposition(player.transform.position);}
		}else{ yield return new WaitForSeconds(0.5f);
			headingposition(player.transform.position);
		}

	}


	public void headingposition(Vector3 des)
	{
		bool wpositive=true,ypositive=true;
		
		Vector3 p = new Vector3(player.transform.position.x,0,player.transform.position.z);
		Vector3 c = new Vector3(transform.position.x,0,transform.position.z);
		float yspan =0,wspan =0;
		float factor=0;
		yspan = player.transform.position.y - transform.position.y;
		
		wspan = SignedAngleBetween(c,p,Vector3.up);
		
		if(yspan<0)
		{
			ypositive=false;
			
		}else
		{
			ypositive=true;
		}
		if(wspan<0)
		{
			wpositive=false;
			
		}else
		{
			wpositive=true;
		}
		wspan = Mathf.Abs(wspan)+this.distraction;
		yspan = Mathf.Abs(yspan);
		
		factor = ospeed/(wspan/20+yspan);
		yspeed = factor*yspan;
		wspeed = wspan*factor;
		
		if(!wpositive)
		{
			wspeed*=-1;
		}
		if(!ypositive)
		{
			yspeed*=-1;
		}
		
	}



	// Update is called once per frame
	void Update () {
		if(up)
		{
			transform.Translate(Vector3.up*yspeed*Time.deltaTime);
		}
		else
		{
			transform.Translate(Vector3.down*yspeed*Time.deltaTime);
		}
		
		if(clockwise)
		{
			transform.RotateAround(Vector3.zero,Vector3.up,wspeed*Time.deltaTime);
		}
		else
		{
			transform.RotateAround(Vector3.zero,Vector3.down,wspeed*Time.deltaTime);
		}
	}
}
