using UnityEngine;
using System.Collections;

public class chaseball : MonoBehaviour {

	public float yspeed=5,wspeed =0;
	public bool up = true;
	public bool clockwise = true;
	public bool inphase=false;

	Vector3 target = Vector3.zero;

	const float standard_duration = 1.0f;
	const float yspeedlowerbound = 3,wspeedlowerbound = 30;
	double last = 9999;

	float ospeed=7;


	float SignedAngleBetween(Vector3 a, Vector3 b, Vector3 n){
		// angle in [0,180]
		float angle = Vector3.Angle(a,b);
		float sign = Mathf.Sign(Vector3.Dot(n,Vector3.Cross(a,b)));
		
		// angle in [-179,180]
		float signed_angle = angle * sign;
		
		// angle in [0,360] (not used but included here for completeness)
		//float angle360 =  (signed_angle + 180) % 360;
		
		return signed_angle;
	}



	GameObject player;
	// Use this for initialization
	void Awake()
	{
		player = GameObject.FindGameObjectWithTag("Player");

	}


	void Start () {
		StartCoroutine(speedcontrol());
	}


	public IEnumerator accelerate(float y,float w,int t)
	{

		int i=0;
		float yspan = Mathf.Abs((y - yspeed)/10);
		float wspan = Mathf.Abs((w - wspeed)/10);

		while(i<t)
		{
			yspeed+=yspan;
			wspeed+=wspan;

			i++;
			yield return new WaitForSeconds(0.1f);
		}


		onaccend();
	}



	public IEnumerator decelerate(float y,float w,int t)

	{
		int i=0;
		float yspan = Mathf.Abs((y - yspeed)/10);
		float wspan = Mathf.Abs((w - wspeed)/10);
		
		while(i<t)
		{
			yspeed-=yspan;
			wspeed-=wspan;
			
			i++;
			yield return new WaitForSeconds(0.1f);
		}
		ondecend();



	}


	public speedbundle speedeExchange()
	{




		return new speedbundle(0,0);

	}




	public class speedbundle

	{
		public float yspeed;
		public float wspeed;
		public speedbundle(float y , float w)
		{
			this.yspeed = y;
			this.wspeed  = w;
		}
	}



	public void headingposition(Vector3 des)
	{
		bool wpositive=true,ypositive=true;

		Vector3 p = new Vector3(player.transform.position.x,0,player.transform.position.z);
		Vector3 c = new Vector3(transform.position.x,0,transform.position.z);
		float yspan =0,wspan =0;
		float factor=0;
		yspan = player.transform.position.y - transform.position.y;

		wspan = SignedAngleBetween(c,p,Vector3.up);

		if(yspan<0)
		{
			ypositive=false;

		}else
		{
			ypositive=true;
		}
		if(wspan<0)
		{
			wpositive=false;

		}else
		{
			wpositive=true;
		}
		wspan = Mathf.Abs(wspan);
		yspan = Mathf.Abs(yspan);

		factor = ospeed/(wspan/30+yspan);
		yspeed = factor*yspan;
		wspeed = wspan*factor;

		if(!wpositive)
		{
			wspeed*=-1;
		}
		if(!ypositive)
		{
			yspeed*=-1;
		}

	}



	public static Vector3 updateradiance(Transform t)
	{
		Vector3 nradiance = new Vector3(t.position.x,0,t.position.z);
		return nradiance;
	}

	public speedbundle calculatespeed()
	{

		return new speedbundle(0,0);
	}




	public void OnPhaseStart()
	{

		inphase = true;
	}

	public void OnPhaseEnd()
	{

		inphase = false;
		decend=false;
		accend=false;
	}

	bool accend=false,decend=false;
	public void onaccend()
	{
		accend=true;
	}

	public void ondecend()
	{
		decend=true;
	}



	public IEnumerator speedcontrol()
	{
		yield return new WaitForSeconds(1.0f);

		int i=0;
		while(true)
		{
			i=0;
			headingposition(player.transform.position);
			OnPhaseStart();

			StartCoroutine(accelerate(yspeed,wspeed,10));

			while(accend==false)
			{
				yield return new WaitForSeconds(0.1f);
			}


			while(i<1)
			{


				i++;
				yield return new WaitForSeconds(1.0f);
			}



			StartCoroutine(decelerate(yspeed/4,wspeed/2,10));

			while(decend==false)
			{
				yield return new WaitForSeconds(0.1f);
			}
			OnPhaseEnd();


		}

	}



	// Update is called once per frame
	void Update ()
		 
	{

		if(up)
		{
			transform.Translate(Vector3.up*yspeed*Time.deltaTime);
		}
		else
		{
			transform.Translate(Vector3.down*yspeed*Time.deltaTime);
		}

		if(clockwise)
		{
			transform.RotateAround(Vector3.zero,Vector3.up,wspeed*Time.deltaTime);
		}
		else
		{
			transform.RotateAround(Vector3.zero,Vector3.down,wspeed*Time.deltaTime);
		}
	}


}
